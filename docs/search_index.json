[["index.html", "WildlifeSystems - biodiversity technologies About Support", " WildlifeSystems - biodiversity technologies Ed Baker 2025-05-07 About This book explains the technologies developed as part of WildlifeSystems and how they can be implemented in real-world scenarios. Support WildlifeSystems nodes were originally developed and used as part of the Leverhulme Trust funded Automated Acoustic Observatories project at the University of York. Additional development is undertaken as part of the Urban Nature Project at the Natural History Museum, London. "],["biodiversity-technologies.html", "Chapter 1 Biodiversity Technologies 1.1 What are Biodiversity Technologies? 1.2 Overall Philosophy 1.3 Structure of Wildlife Systems", " Chapter 1 Biodiversity Technologies 1.1 What are Biodiversity Technologies? Biodiversity technologies are tools that allow researchers and others to study, monitor and conserve biodiversity. These tools can be used to monitor a wide range of species, habitats, and ecosystems, potentially in (near) real-time and/or from a great distance away. 1.1.1 What has enabled Biodiversity Technologies? The development of biodiversity technologies has been enabled by the rapid advances in sensor technology, data processing, and communication networks. These technologies have made it possible to collect, store, and analyse large amounts of data from a wide range of sources, including remote sensors, cameras, and acoustic recorders. This has been accompanied by a decline in the cost of these technologies (e.g. Figure 1.1), making them more accessible to researchers, conservationists, and others interested in monitoring biodiversity. ## Warning in xy.coords(x, y, xlabel, ylabel, log): NAs introduced by coercion Figure 1.1: The decline in storage costs per megabyte in consumer hard drives. These technologies can potentially create vast datasets, and in order to adhere to the FAIR principles (Findable, Accessible, Interoperable, Reusable), it is important for the data to be accompanied by an appropriate suite of data standards, such as those developed by TDWG. 1.2 Overall Philosophy 1.2.1 Leverage what already exists Many of the tools that are needed to monitor biodiversity already exist, and the goal of WildlifeSystems is to bring these tools together in a coherent and integrated way. This will allow researchers and others to build on existing technologies to develop new tools and applications that can be used to monitor biodiversity in a wide range of environments.These tools are designed to be flexible, scalable, and easy to use, and to provide a platform for the development of new technologies and applications. 1.2.2 Innovate where necessary “Technology is stuff that doesn’t work yet.” — Bran Ferren Where suitable technological solutions already exist, use them. Limit technological research to what needs to be new. Most of the time it’s OK to use existing technology, and focus development on the biodiversity related problem you’re trying to solve. Older technologies are often better understood and more stable. Some of the technologies WildlifeSystems leverages to innovate in the biodiversity sphere are given in Table 1.1. Table 1.1: Age of technologies underpinning WildlifeSystems. Technology Year Introduced Age in 2025 Ethernet 1973 52 BASH 1989 36 Linux 1991 34 1.2.3 Plan for heterogeneity Any network of devices will become heterogeneous given sufficient time. The primary driver of this shift to heterogeneity is continuous technological innovation combined with obsolescence of technical components. Secondary drivers are changes in the purpose, capabilities, and/or scale of the network over time. The WildlifeSystems ecosystem is designed to be able to handle this heterogeneity, and to allow for the easy integration of new technologies as they become available. 1.2.4 Modularise The WildlifeSystems ecosystem is designed to be modular, with each component able to be used independently or in combination with other components. This allows users to build custom solutions that meet their specific needs, and to easily add or remove components as required. Defined interfaces between components allow for easy integration of new technologies, and for components to be replaced or upgraded without affecting the rest of the system. This also lets contributors to focus on what they are best at. 1.2.5 Open Source 1.3 Structure of Wildlife Systems 1.3.1 Packages "],["sensor-networks.html", "Chapter 2 Sensor Networks", " Chapter 2 Sensor Networks "],["environmental-sensors.html", "Chapter 3 Environmental Sensors 3.1 How sensors work", " Chapter 3 Environmental Sensors 3.1 How sensors work 3.1.1 Temperature 3.1.1.1 Thermistors A thermistor is a type of resistor whose resistance changes significantly with temperature. The word is a portmanteau of thermal and resistor. 3.1.2 Humidity 3.1.2.1 Capacitive Humidity Sensors A capacitative humidity sensor consists of a small capacitor with a hygroscopic dielectric material between two electrodes. The dielectric material, usually a plastic or polymer, has a low dielectric constant when dry. In the presence of moisture, the dielectric constant increases due to water vapor, which has a much higher dielectric constant. As moisture is absorbed, the sensor’s capacitance increases. The amount of moisture absorbed depends on the surrounding temperature and water vapour pressure, which also affects the hygroscopic dielectric material used in the sensor. 3.1.3 Air Pressure 3.1.4 Gases 3.1.4.1 Heated Gas Resistance Heated gas sensors are used to detect gases in the air. The sensor consists of a metal oxide semiconductor that is heated to a high temperature. Volatile organic compounds (VOCs) in the air change the resistance of the sensor. These sensors are typically used indoors and have a short lifespan (perhaps two years). As such they are rarely used in environmental sensing applications, but are included on some common sensors such as the BME680. "],["sensors-in-wildlifesystems.html", "Chapter 4 Sensors in WildlifeSystems 4.1 Devices included in the base system 4.2 Installing sensor support 4.3 Reading data from a device 4.4 The sensor reading process 4.5 Installing new sensors", " Chapter 4 Sensors in WildlifeSystems The WildlifeSystems platform comes with support for some popular existing environmental sensors, although there are many on the market and the range available is subject to constant change. The modular nature of WildlifeSystems allows for new sensors to be easily integrated if the need arises. WildlifeSystems takes an abstracted approach to sensors. Interface modules are provided for each sensor, which can be used to read the sensor data into a standard format. As many physical packages contain multiple sensors (e.g. the supported BME680 can monitor temperature, humidity, air pressure and air quality) there is a conceptual difference between a “device” and the one or more sensors on a device. 4.1 Devices included in the base system The Raspberry Pi does not come with environmental sensors, however there are several onboard sensors that are used to monitor the operation of the hardware, to prevent crucial components from overheating, including the temperature of the CPU and GPU chips. WildlifeSystems provides access to these sensors through the sensor-onboard package, as well as providing some software sensors that report the free memory and free SD storage available. These can be useful for detecting and resolving possible issues on a sensor node before a serious problem arises. 4.2 Installing sensor support Support for sensors is installed as part of the node installation process, however it is possible to install the sensor-control abstraction layer onto any Raspberry Pi system using the command below. wget -O - https://raw.githubusercontent.com/Wildlife-Systems/sensor-control/main/install | sudo bash This will install the sensor-control and sensor-onboard scripts into the system, as well as installing a small of number of supporting packages if they are not already installed. 4.3 Reading data from a device The sensor read command, sr, can be used to list the available devices on a given sensor. sr onboard list The sensor read command, sr, can also be used to read data from a named sensor. Not specifying a sensor is equivalent to reading all sensors on that device (i.e. using the wildcard”*“). sr onboard sr onboard * sr onboard onboard_gpu This will give a JSON string listing information about each sensor (or just the specified sensor), and the current reading. This information can be presented in a more human readable form by piping the output to the program jq, a command line JSON processor. sr onboard | jq 4.4 The sensor reading process The sensor reading process in WildlifeSystems has five steps. The sr command identifies which device script to route the request to. The sensor script calls the sc-prototype script to obtain a template (“prototype”) of the JSON request. The sensor script accesses the relevant sensor(s) and populates the values in a template for each sensor reading, before returning a JSON array of populated readings to sr. The sr script populates additional information for each reading, providing the node_id and a timestamp for each. sr returns the finalised JSON array to the user. 4.5 Installing new sensors "],["supported-sensors.html", "Chapter 5 Supported sensors 5.1 Installing supported sensors 5.2 List of supported sensors", " Chapter 5 Supported sensors 5.1 Installing supported sensors The sc-inst command can be used to install support for a sensor. The command takes the name of the sensor as an argument, and will install the necessary scripts and packages to support the sensor. sc-inst &lt;sensor-name&gt; 5.2 List of supported sensors 5.2.1 BME680 4-in-1 sensor that provides humidity, temperature, pressure, and gas readings. 5.2.2 DS18B20 The DS18B20 is a digital thermometer that provides Celsius measurements over a 1-Wire interface. It is a low-cost, low-power device that can be used for a variety of environmental monitoring applications. Waterproof versions are available, making it suitable for use in water and soils. 5.2.3 DHT11 The DHT11 is a low-cost temperature and humidity sensor. It uses a capacitive humidity sensor and a thermistor to measure the surrounding air, and sends the data by digital signals on the data pin. The low-cost nature of the sensor makes it useful desp ite several shortcomings, e.g. for monitoring the temperature and humidity inside electronics enclosures where accuracy is not critical but the sensor can provide critical early warning of overheating or condensation. "],["implementing-new-sensors.html", "Chapter 6 Implementing new sensors 6.1 Reading the sensor 6.2 Setting the environment 6.3 Install 6.4 The installation process with si 6.5 Submitting packages to WildlifeSystems", " Chapter 6 Implementing new sensors New sensors should be implemented as new packages (i.e, a new GitHub repository). Packages have a standard format, and should be named sensor-&lt;sensor-name&gt; where &lt;sensor-name&gt; is short, descriptive of the sensor (e.g. model number), and unique within the WildlifeSystems ecosystem. The structure of a basic package is given below. . +-- inst | +-- files that are not part of the package structure | used during installation (e.g. 3rd party scripts | to be copied to /usr/bin/) | +-- sensor-&lt;sensor-name&gt; | Executable to read sensor and print JSON of readings | (copied on install to /usr/bin/) | +-- &lt;sensor-name&gt; | Configuration file | (copied on install to /var/aao/sensors/) | +-- install | Bash file run once on install - used to install packaged | dependencies, etc. As many people implement various sensors on the Raspberry Pi, it is likely that some sort of solution is already available, that can be tweaked to output readings in the standard format required. However, you must ensure that any licensing conditions are met. In particular, an open license is required if submitting your sensor package to WildlifeSystems for inclusion in the ecosystem. 6.1 Reading the sensor File sensor-&lt;sensor-name&gt; provides the functionality to read the protoype JSON, populate the JSON with sensor readings, and print the output. The file can be written in any programming or scripting language, but to prevent overhead consideration should be given to minimising the number of new packages installed. 6.1.1 In bash #!/bin/bash # Read the prototype JSON JSON=$(sc-prototype) echo -n &quot;[&quot; # Code to read the sensor value into GPU_TEMP # Use `jq` to modify JSON SENSOR=$(echo $JSON | jq &quot;.sensor |= \\&quot;onboard_gpu\\&quot; | .measures |= \\&quot;temperature\\&quot; | .unit |= \\&quot;Celsius\\&quot;| .value |= ${GPU_TEMP}&quot;) echo -n $SENSOR echo &quot;]&quot; 6.1.2 In Python #!/ import os import json # Read the prototype JSON stream = os.popen(&#39;sc-prototype&#39;) output = stream.read() # Pre-populate with sensor metadata temperature = json.loads(output) temperature[&quot;sensor&quot;] = &quot;bme680_temperature&quot; temperature[&quot;measures&quot;] = &quot;temperature&quot; temperature[&quot;unit&quot;] = &quot;Celsius&quot; # Code to read sensor and output in variable `sensor_reading` temperature[&quot;value&quot;] = sensor_reading # Output the JSON in an array print(&quot;[&quot;,json.dumps(temperature),&quot;]&quot;) 6.2 Setting the environment The file &lt;sensor-name&gt; in the package specifies information that modify the environment of the Raspberry Pi (e.g. if the i2c interface should be enabled) before the sensor-&lt;sensor-name&gt; script is run. This allows sensors with different requirements to run sequentially on the same node. The file must always be present, even if it is empty. During installation the file is moved to /var/aao/sensors/ and the list of files in this directory indicates to the system which sensors are installed. TODO: i2c 6.3 Install The file install in the directory is run once, when the sensor package is installed. This allows for the installation of packages and scripts necessary for the functioning of the package. The file is executed by bash and the use of sudo is allowed. 6.4 The installation process with si The sensor install script, si, from sensor-control is used to install sensor packages. For developer reference the installation process is described below. si clones the Wildlife-Systems/sensor-&lt;sensor-name&gt; repository from GitHub. The install script is executed. sensor-&lt;sensor-name is marked as executable and move to /usr/bin/. &lt;sensor-name&gt; is moved to /var/aao/sensors/. The cloned repository is removed from the local filesystem. 6.5 Submitting packages to WildlifeSystems Submitting packages (where licensing allows) to WildlifeSystems allows the ecosystem to be developed and sustained collaboratively by the user community. Packages can be sent to the administrators as a compressed file, or a request can be sent to fork an existing GitHub repository. Contact details can be found at https://wildlife.systems/contact.html. "],["sound-devices.html", "Chapter 7 Sound Devices 7.1 How sound devices work", " Chapter 7 Sound Devices 7.1 How sound devices work "],["sound-devices-in-wildlifesystems.html", "Chapter 8 Sound devices in WildlifeSystems 8.1 Installing sound device support 8.2 Supported sound devices 8.3 Installing a sound device", " Chapter 8 Sound devices in WildlifeSystems 8.1 Installing sound device support Support for sound devices is installed as part of the node installation process, however it is possible to install the sound-device-control abstraction layer onto any Raspberry Pi system using the command below. `wget -O - https://github.com/wildlife-systems/sound-device-control/raw/master/install | sudo bash` The installation will install the alsa-utils package on Ubuntu/Debian systems, and add the current user to the audio group. 8.2 Supported sound devices The WildlifeSystems platform supports several popular sound capture and playback devices. 8.2.1 Raspberry Pi onboard audio 8.2.2 AudioInjector Zero 8.2.3 AudioInjector Octo 8.2.4 AudioInjector Ultra 8.2.5 I2C microphone (e.g. Google Voice Hat) Limited to 48kHz sample rate, no record volume control. 8.2.6 Respeaker 6 mic array 8.2.7 Audio+ DAC 8.2.8 Wolfson Audio Card 8.3 Installing a sound device To install support for a sound device, run the following command. sdc-inst &lt;sound-device-name&gt; To get a list of names of supported devices, run the following command. sdc-inst list "],["imaging-devices.html", "Chapter 9 Imaging Devices 9.1 How imaging devices work", " Chapter 9 Imaging Devices 9.1 How imaging devices work "],["imaging-devices-in-wildlifesystems.html", "Chapter 10 Imaging devices in WildlifeSystems", " Chapter 10 Imaging devices in WildlifeSystems "],["power-management.html", "Chapter 11 Power Management 11.1 Installation of power management tools 11.2 Turning funtionality on and off 11.3 Considerations", " Chapter 11 Power Management Power management on the Raspberry Pi is useful when deployments are made that are powered by batteries and/or renewable sources such as solar power that are intermittent. In addition, there are small environmental benefits on consuming less power on systems which have continual grid power. The pi-pwr script can be used to turn off unused functionality, either always or just when it is not required. 11.1 Installation of power management tools The power management tools are installed as part of the node installation process, however they can be easily installed independently on any Raspberry Pi system. wget -O - https://github.com/wildlife-systems/pi-pwr/raw/master/install | sudo bash 11.2 Turning funtionality on and off 11.3 Considerations Disabling all network functionality will prevent the node from communicating until either the functionality is turned back on or the Raspberry Pi is restarted. If disabling all connectivity is desired periodically then the functionality to turn these systems back on must be scripted. 11.3.1 A note on sudo Raspberry Pi OS (and previously Raspbian) allows the default user to run sudo without a password. This is not true for other Linux distributions, such as Ubuntu. This could lead to a password prompt when using pi-pwr. As nodes are designed to run autonomously, the installation process for ws-node will configure pi-pwr to not require a sudo password. "],["indicators-and-heartbeats.html", "Chapter 12 Indicators and heartbeats 12.1 Installation of ws-indcate and ws-heartbeat 12.2 Indicators 12.3 Heartbeat", " Chapter 12 Indicators and heartbeats The script ws-indicate is used to indicate the device’s status using the LED(s) on board the Raspberry Pi. The script ws-heartbeat can be used to transmit the device’s status to a user-defined script that could provide logging, or submit the status to an online dashboard. 12.1 Installation of ws-indcate and ws-heartbeat These tools are installed as part of the node installation process. 12.2 Indicators Internally ws-inidicate makes repeated calls to pi-pwr to control the LED(s). There are three indicator routines, heartbeat (quick flash of LEDs in order to show device is functioning), countdown (flashes power LED), and record (power LED on, action LED off). sudo ws-indicate sudo ws-indicate countdown 5 # counts down from 5 sudo ws-indicate record action # record light is on while action is executed 12.2.1 A note on sudo Raspberry Pi OS (and previously Raspbian) allows the default user to run sudo without a password. This is not true for other Linux distributions, such as Ubuntu. This could lead to a password prompt when using ws-indicate. As nodes are designed to run autonomously, the installation process for ws-node will configure ws-indicate to not require a sudo password. 12.3 Heartbeat The script ws-heartbeat is used to send a heartbeat signal to the devices.wildlife.systems server to indicate that the node is alive and connected, as well as to provide some information to assist problem diagnosis. The data sent comes from the onboard sensor readings (sr onboard) and the server stores the node ID, timestamp, CPU and GPU temperatures, and the amount of memory and storage used. The node must be registered with WildlifeSystems for this data to be stored. The script may be run for debugging purposes at any time as follows. ws-heartbeat The script will exit silently on success. "],["integration-with-monitoring-tools.html", "Chapter 13 Integration with monitoring tools 13.1 PRTG", " Chapter 13 Integration with monitoring tools 13.1 PRTG As the devices are Raspberry Pi based, we can use the PRTG monitoring tool to monitor standard aspects of their performance including CPU, memory, disk space, and network traffic. 13.1.1 Monitoring custom sensors Some sensors attached to WildlifeSystems nodes may be used to monitor aspects of the devices themselves, rather than the environment. Using custom PRTG scripts it is possible to include these measurements in PRTG reports and alerts. The following example reports the humidity of the device enclosure measured by a DHT11 sensor. It makes use of the WildlifeSystems sr command to read the sensor in a standard JSON format, and converts the reading to a format expected by PRTG. #!/bin/bash HV=$(sudo sr dht11 | jq &#39;map(select(.sensor == &quot;dht11_humidity&quot;)) | .[][&quot;value&quot;]&#39;) if (( $HV &lt; 75 )); then /bin/echo &quot;0:$HV:Acceptable humidity&quot; else /bin/echo &quot;4:$HV:Too humid&quot; fi "],["developer-guidelines.html", "Chapter 14 Developer Guidelines 14.1 Documentation", " Chapter 14 Developer Guidelines 14.1 Documentation There are three main kinds of documentation in the WildlifeSystems project. Code comments: Primarily for future you (or someone similar) to get to grips with your code. Why does this code do this?. Package documentation: Describes what your package does, how it interacts with the larger system. What will this package do for me? Overall project documentation: This manual. How do I use the entire system for my research? "],["server-tools.html", "Chapter 15 Server Tools 15.1 Installation 15.2 Adding nodes and receieving a token 15.3 Removing a node", " Chapter 15 Server Tools These tools are only needed for running and maintaining the wildlife.systems webserver. 15.1 Installation git clone git@github.com:Wildlife-Systems/wildlife.systems-tools.git cd wildlife.systems-tools ./install cp .ws-db.php ~/ #Edit ~/.ws-db.php to connect to the wildlife-systems database 15.2 Adding nodes and receieving a token ws-node-add &lt;node_id&gt; Adding a node by it’s ID (serial number of the Raspberry Pi) will add the device to the wildlife.systems database, generate a token, and display the token (a UUID) in the console. This token is used to authenticate the device when it sends data to wildlife.systems. 15.3 Removing a node ws-node-remove &lt;node_id&gt; "],["references.html", "References", " References "],["return-codes.html", "A Return codes A.1 00-09 Script functionality A.2 10-19 Parameter problems A.3 20-29 Sensor problems A.4 30-39 Sound device problems A.5 40-49 Image device problems A.6 50-59 Power management problems A.7 60-69 Special meanings", " A Return codes The various scripts that form the WildlifeSystems ecosystem use a standard set of return codes. A.1 00-09 Script functionality Code Label Description 0 OK Terminated normally. No error. 1 Already running The script determined it was already running and terminated. 2 No arguments The script requires arguments but none given. Will give help text. A.2 10-19 Parameter problems Code Label Description 10 Invalid argument One or more of the arguments to the script was invalid. 11 Incorrect filename pattern A standard filename pattern was expected. Allowed values are ‘timestamp’. A.3 20-29 Sensor problems Code Label Description 20 Unknown device This device is not supported, or software is not installed. 21 Unknown sensor This sensor is not known on this device. A.4 30-39 Sound device problems Code Label Description 30 Unsupported device The specified device is unsupported. 31 Unsupported feature This feature is not present on the sound device. 32 Unknown feature The feature requested is unknown. A.5 40-49 Image device problems Code Label Description 40 Unsupported device The specified device is unsupported. 41 Unsupported feature This feature is not present on the sound device. 42 Unknown feature The feature requested is unknown. A.6 50-59 Power management problems Code Label Description 50 Disallowed value (should be on or off) The specified device is unsupported. 51 Disallowed value (should be on, off or default) This feature is not present on the sound device. A.7 60-69 Special meanings Code Label Description 60 Identify as a sensor device script Returned by sensor device script in response to first parameter identify. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
