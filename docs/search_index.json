[["index.html", "WildlifeSystems - biodiversity technologies About", " WildlifeSystems - biodiversity technologies Ed Baker 2022-08-17 About This book explains the technologies developed as part of WildlifeSystems and how they can be implemented in real-world scenarios. "],["biodiversity-technologies.html", "Chapter 1 Biodiversity Technologies 1.1 Structure of Wildlife Systems", " Chapter 1 Biodiversity Technologies What are Biodiversity Technologies? 1.1 Structure of Wildlife Systems 1.1.1 Overall Philosophy 1.1.2 Packages "],["sensor-networks.html", "Chapter 2 Sensor Networks", " Chapter 2 Sensor Networks "],["environmental-sensors.html", "Chapter 3 Environmental Sensors 3.1 How sensors work", " Chapter 3 Environmental Sensors 3.1 How sensors work 3.1.1 Temperature 3.1.2 Humidity 3.1.3 Air Pressure 3.1.4 Gases 3.1.4.1 Heated Gas Resistance "],["sensors-in-wildlifesystems.html", "Chapter 4 Sensors in WildlifeSystems 4.1 Sensors included in the base system 4.2 Installing sensor support 4.3 Reading data from a sensor 4.4 The sensor reading process 4.5 Installing new sensors", " Chapter 4 Sensors in WildlifeSystems The WildlifeSystems platform comes with support for some popular existing environmental sensors, although there are many on the market and the range available is subject to constant change. The modular nature of WildlifeSystems allows for new sensors to be easily integrated if the need arises. 4.1 Sensors included in the base system The Raspberry Pi does not come with environmental sensors, however there are several onboard sensors that are used to monitor the operation of the hardware, to prevent crucial components from overheating, including the temperature of the CPU and GPU chips. WildlifeSystems provides access to these sensors through the sensor-onboard package, as well as providing some software sensors that report the free memory and free SD storage available. These can be useful for detecting and resolving possible issues on a sensor node before a serious problem arises. 4.2 Installing sensor support Support for sensors is installed as part of the node installation process, however it is possible to install the sensor-control abstraction layer onto any Raspberry Pi system using the command below. wget -O - https://raw.githubusercontent.com/Wildlife-Systems/sensor-control/main/install | sudo bash This will install the sensor-control and sensor-onboard scripts into the system, as well as installing a small of number of supporting packages if they are not already installed. 4.3 Reading data from a sensor The sensor read command, sr, can be used to read sensor data. sr onboard This will give a JSON string listing information about each sensor, and the current reading. This information can be presented in a more human readable form by piping the output to the program jq, a command line JSON processor. sr onboard | jq 4.4 The sensor reading process The sensor reading process in WildlifeSystems has five steps. The sr command identifies which sensor script to route the request to. The sensor script calls the sc-prototype script to obtain a template (“prototype”) of the JSON request. The sensor script access the relevant sensor(s) and populates the values in a template for each sensor reading, before returning a JSON array of populated readings to sr. The sr script populates additional information for each reading, providing the node_id and a timestamp for each. sr returns the finalised JSON array to the user. 4.5 Installing new sensors "],["implementing-new-sensors.html", "Chapter 5 Implementing new sensors 5.1 Reading the sensor 5.2 Setting the environment 5.3 Install", " Chapter 5 Implementing new sensors 5.1 Reading the sensor File sensor-&lt;sensor-name&gt; provides the functionality to read the protoype JSON, populate the JSON with sensor readings, and print the output. The file can be written in any programming or scripting language, but to prevent overhead consideration should be given to minimising the number of new packages installed. 5.1.1 In bash #!/bin/bash # Read the prototype JSON JSON=$(sc-prototype) echo -n &quot;[&quot; # Code to read the sensor value into GPU_TEMP # Use `jq` to modify JSON SENSOR=$(echo $JSON | jq &quot;.sensor |= \\&quot;onboard_gpu\\&quot; | .measures |= \\&quot;temperature\\&quot; | .unit |= \\&quot;Celsius\\&quot;| .value |= ${GPU_TEMP}&quot;) echo -n $SENSOR echo &quot;]&quot; 5.1.2 In Python #!/ import os import json # Read the prototype JSON stream = os.popen(&#39;sc-prototype&#39;) output = stream.read() # Pre-populate with sensor metadata temperature = json.loads(output) temperature[&quot;sensor&quot;] = &quot;bme680_temperature&quot; temperature[&quot;measures&quot;] = &quot;temperature&quot; temperature[&quot;unit&quot;] = &quot;Celsius&quot; # Code to read sensor and output in variable `sensor_reading` temperature[&quot;value&quot;] = sensor_reading # Output the JSON in an array print(&quot;[&quot;,json.dumps(temperature),&quot;]&quot;) 5.2 Setting the environment The file &lt;sensor-name&gt; in the package specifies information that modify the environment of the Raspberry Pi (e.g. if the i2c interface should be enabled) before the sensor-&lt;sensor-name&gt; script is run. This allows sensors with different requirements to run sequentially on the same node. The file must always be present, even if it is empty. During installation the file is moved to /var/aao/sensors/ and the list of files in this directory indicates to the system which sensors are installed. TODO: i2c 5.3 Install The file install in the directory is run once, when the sensor package is installed. This allows for the installation of packages and scripts necessary for the functioning of the package. The file is executed by bash and the use of sudo is allowed. "],["power-management.html", "Chapter 6 Power Management 6.1 Installation of power management tools 6.2 Turning funtionality on and off 6.3 Considerations", " Chapter 6 Power Management Power management on the Raspberry Pi is useful when deployments are made that are powered by batteries and/or renewable sources such as solar power that are intermittent. In addition, there are small environmental benefits on consuming less power on systems which have continual grid power. The pi-pwr script can be used to turn off unused functionality, either always or just when it is not required. 6.1 Installation of power management tools The power management tools are installed as part of the node installation process, however they can be easily installed independently on any Raspberry Pi system. wget -O - https://github.com/wildlife-systems/pi-pwr/raw/master/install | sudo bash 6.2 Turning funtionality on and off 6.3 Considerations Disabling network functionality (WiFI / Ethernet) will prevent the node from communicating until either the functionality is turned back on or the Raspberry Pi is restarted. If disabling all connectivity is desired periodically then the functionality to turn these systems back on must be scripted. "],["developer-guidelines.html", "Chapter 7 Developer Guidelines 7.1 Documentation", " Chapter 7 Developer Guidelines 7.1 Documentation There are three main kinds of documentation in the WildlifeSystems project. Code comments: Primarily for future you (or someone similar) to get to grips with your code. Why does this code do this?. Package documentation: Describes what your package does, how it interacts with the larger system. What will this package do for me? Overall project documentation: This manual. How do I use the entire system for my research? "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
